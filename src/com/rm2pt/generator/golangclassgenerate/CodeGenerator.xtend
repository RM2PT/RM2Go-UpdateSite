/*
 * RM2PT Generator Runtime
 * generated by RM2PT v1.3.0
 */		
package com.rm2pt.generator.golangclassgenerate

import net.mydreamy.requirementmodel.rEMODEL.Entity
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import java.util.ArrayList
import net.mydreamy.requirementmodel.rEMODEL.Contract
import net.mydreamy.requirementmodel.rEMODEL.Service
import java.util.HashMap

class CodeGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		System.out.println("hello, goen!!!");
		var entities = new ArrayList<Entity>();
		// 这个Iterable本身不知道为什么只能遍历一次（调用一次for），所以将里面的元素进行转移
		var ite = resource.allContents.toIterable.filter(typeof(Entity));
		for(e : ite){
			System.out.println(e);
			entities.add(e);
		}
		
//		System.out.println("hello, goen!!!");
//		var zEntities = ZEntityFactory.generateZEntities(entities);
////		
//		fsa.generateFile("Auto/sql/schema.sql", SQLGenerator.generate(zEntities));
//		for(e : zEntities){
//			fsa.generateFile("Auto/entity/" + e.entityName.initialLow + ".go", EntityGenerator.generate(e));
//		}
//		fsa.generateFile("Auto/entity/init.go", EntityGenerator.generateInit(zEntities))
		var contractMap = new HashMap<String, Contract>();
		for(contract : resource.allContents.toIterable.filter(typeof(Contract))){
	 		contractMap.put(contract.op.name, contract);
		}
		for(service : resource.allContents.toIterable.filter(typeof(Service))){
	 		fsa.generateFile("Auto/serviceGen/" + service.name + ".go", ServiceGenerator.generate(service, contractMap));	
		}
		
		
		
	}

	
}

